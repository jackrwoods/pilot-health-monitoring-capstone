{"version":3,"sources":["components/BigNumber.js","components/ConnectionStatus.js","components/Graph.js","components/Row.js","components/Trend.js","components/WarningPane.js","App.js","serviceWorker.js","index.js"],"names":["Graph","class","this","props","children","uom","Component","ConnectionStatus","conFail","connection","style","color","servFail","server","highLat","ping","chartRef","React","createRef","ColorRGBA","devicePixelRatio","window","chartCanvas","current","width","clientWidth","height","clientHeight","line","WebglLine","wglp","WebGLplot","lineSpaceX","console","log","addLine","setInterval","data","getData","i","setY","avg","update","ref","display","left","innerHeight","id","Row","className","Trend","stress","len","HR","length","trend","rawData","slope","slice","reduce","a","b","Math","abs","WarningPane","App","pingClient","W3CWebSocket","location","hostname","wsClient","state","avgHR","SpO2","avgSpO2","connectionPingMillis","avgConnectionPing","pingEpoch","Date","now","dataServerPing","onopen","setState","onclose","onmessage","message","JSON","parse","push","toFixed","shift","sentTimestamp","timestamp","interval","send","round","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12a7a04f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './BigNumber.css';\r\n\r\nclass Graph extends Component {\r\n  render() {\r\n    return (\r\n        <span class=\"BigNumber\">{this.props.children} {this.props.uom}</span>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Graph;","import React, { Component } from 'react';\r\n\r\nclass ConnectionStatus extends Component {\r\n    \r\n  render() {\r\n    const conFail = this.props.connection.connection ? <span style={{color: 'rgb(4, 233, 61)'}}>CON</span> : <span style={{color: 'rgb(253, 6, 11)'}}>CON FAIL</span>\r\n    const servFail = this.props.connection.server ? <span style={{color: 'rgb(4, 233, 61)'}}>SRV</span> : <span style={{color: 'rgb(253, 6, 11)'}}>SRV FAIL</span>\r\n    const highLat = this.props.connection.connection && this.props.ping && this.props.ping > 15 ? <span style={{ color: 'rgb(253, 6, 11)' }}>LATC {this.props.ping}ms</span> : <span style={{color: 'rgb(4, 233, 61)'}}>LATC</span>\r\n    return (\r\n        <div>{conFail} | {servFail} | {highLat}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ConnectionStatus;","import React, { Component } from 'react';\r\nimport WebGLplot, { WebglLine, ColorRGBA } from 'webgl-plot';\r\nimport './Graph.css';\r\n\r\nclass Graph extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.chartRef = React.createRef();\r\n    this.color = new ColorRGBA(255, 255, 255, 1);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Initial setup\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    this.chartCanvas = this.chartRef.current;\r\n    this.chartCanvas.width = this.chartCanvas.clientWidth * devicePixelRatio;\r\n    this.chartCanvas.height = this.chartCanvas.clientHeight * devicePixelRatio;\r\n    this.line = new WebglLine(this.color, 1000);\r\n    this.wglp = new WebGLplot(this.chartCanvas);\r\n\r\n    this.line.lineSpaceX(-1, 2 / 1000);\r\n    console.log(2 / 1000)\r\n    this.wglp.addLine(this.line);\r\n    setInterval(() => {\r\n      const data = this.props.getData();\r\n      for (let i = 0; i < 1000; i++) {\r\n        this.line.setY(i, (data.data[i] -  data.avg) / 10);\r\n      }\r\n      this.wglp.update();\r\n    }, 17)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"grid-container\">\r\n        <div class=\"canvas\"><canvas ref={this.chartRef} style={{display: 'block', left: '0px', width: '100vw', height: window.innerHeight * 0.3 + 'px'}} id=\"my_canvas\" /></div>\r\n        <div class=\"topLabel\">{this.props.getData().avg + 10}</div>\r\n        <div class=\"bottomLabel\">{this.props.getData().avg - 10}</div>\r\n      </div>\r\n          \r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Graph;","import React, { Component } from 'react';\r\nimport './Row.css';\r\n\r\nclass Row extends Component {\r\n  render() {\r\n    return (\r\n        <div className=\"Row\">\r\n            {this.props.children}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\n\r\nclass Trend extends Component {\r\n  render() {\r\n    const stress = true ? <span style={{color: 'rgb(4, 233, 61)'}}>UNSTR</span> : <span style={{color: 'rgb(253, 6, 11)'}}>STRSD</span>\r\n    \r\n\r\n    const len = this.props.data.HR.length;\r\n    let trend = <span style={{color: 'rgb(4, 233, 61)'}}>TRND —</span>\r\n    if (len > 10) {\r\n        let rawData = this.props.data.HR;\r\n        let slope = (rawData.slice(len / 2, len - 1).reduce((a, b) => a + b) - rawData.slice(0, len / 2).reduce((a, b) => a + b))\r\n        if (Math.abs(slope) > 0.2) {\r\n            if (slope > 0) {\r\n                trend = <span style={{color: 'rgb(252, 220, 39)'}}>TRND ▲</span>\r\n            } else {\r\n                trend = <span style={{color: 'rgb(4, 233, 61)'}}>TRND ▼</span>\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>{stress} | {trend}</span>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Trend;","import React, { Component } from 'react';\r\nimport './WarningPane.css';\r\n\r\nclass WarningPane extends Component {\r\n  render() {\r\n    return (\r\n        <div className=\"WarningPane\">\r\n            {this.props.children}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WarningPane;","import { React, Component } from 'react';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport './App.css';\r\n\r\n// App frontend components\r\nimport BigNumber from './components/BigNumber'\r\nimport ConnectionStatus from './components/ConnectionStatus'\r\nimport Graph from './components/Graph'\r\nimport Row from './components/Row'\r\nimport Trend from './components/Trend'\r\nimport WarningPane from './components/WarningPane';\r\n\r\nclass App extends Component {\r\n\r\n  // This constructor just instantiates constants for the websocket connection\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Establish ping and data connections\r\n      this.pingClient = new W3CWebSocket('ws://' + window.location.hostname + ':8080/ping');\r\n      this.wsClient = new W3CWebSocket('ws://' + window.location.hostname + ':8080/data');\r\n\r\n    this.state = {\r\n      connection: {\r\n        connection: false,\r\n        server: false,\r\n      },\r\n      data: {\r\n        rawData: [],\r\n        HR: [],\r\n        avgHR: 70,\r\n        SpO2: [],\r\n        avgSpO2: 95\r\n      },\r\n      // Calculate ping\r\n      ping: {\r\n        connectionPingMillis: [], // Array of ping observations\r\n        avgConnectionPing: 0, // The average ping\r\n        pingEpoch: Date.now(), // Temporarily stores the \"sent\" time when calculating round-trip time\r\n        dataServerPing: 0,\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.wsClient.onopen = () => {\r\n      console.log('Data WebSocket Client Connected');\r\n      this.setState((state) => {\r\n        state.connection.connection = true\r\n        state.connection.server = true\r\n      })\r\n    };\r\n\r\n    this.wsClient.onclose = () => {\r\n      console.log('Data WebSocket Client Disconnected');\r\n      this.setState((state) => {\r\n        state.connection.connection = false\r\n        state.connection.server = false\r\n      })\r\n    }\r\n\r\n    this.wsClient.onmessage = (message) => {\r\n      this.setState((state => {\r\n        let data = JSON.parse(message.data);\r\n        state.data.rawData.push(data);\r\n        state.data.HR.push(data.HR);\r\n        state.data.SpO2.push(data.SpO2);\r\n        if (state.data.HR.length > 2) {\r\n          state.data.avgHR = (state.data.HR.reduce((a, b) => a + b) / state.data.HR.length).toFixed(1);\r\n          state.data.avgSpO2 = (state.data.SpO2.reduce((a, b) => a + b) / state.data.SpO2.length).toFixed(1);\r\n        }\r\n        if (state.data.HR.length > 1000) { // Sensor reads at 100hz, so this is approximately 1 minute of data\r\n          state.data.HR.shift(); // Delete the oldest point\r\n          state.data.SpO2.shift();\r\n          state.data.rawData.shift();\r\n\r\n        }\r\n        state.ping.dataServerPing = data.sentTimestamp - data.timestamp;\r\n      }));\r\n    };\r\n\r\n    this.pingClient.onopen = () => {\r\n      console.log('Ping WebSocket Client Connected');\r\n\r\n      this.interval = setInterval(() => {\r\n        this.setState((state) => state.ping.pingEpoch = Date.now());\r\n        this.pingClient.send(':)');\r\n      }, 200);\r\n    }\r\n\r\n    this.pingClient.onmessage = (message) => {\r\n      const now = Date.now();\r\n      this.setState((state) => {\r\n        state.ping.connectionPingMillis.push((now - state.ping.pingEpoch) / 2);\r\n        if (state.ping.connectionPingMillis.length > 30) state.ping.connectionPingMillis.shift();\r\n        state.ping.avgConnectionPing = Math.round(state.ping.connectionPingMillis.reduce((a, b) => a + b) / state.ping.connectionPingMillis.length);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* Warning pane */}\r\n        <Row>\r\n          <WarningPane><Trend data={this.state.data} /></WarningPane>\r\n        </Row>\r\n        <Row>\r\n          <WarningPane><ConnectionStatus connection={this.state.connection} ping={this.state.ping.avgConnectionPing + this.state.ping.dataServerPing} /></WarningPane>\r\n        </Row>\r\n\r\n        {/* Graphs and data visualization */}\r\n        <Row>\r\n          <Graph getData={() => ({data: this.state.data.HR, avg: this.state.data.avgHR})}/>\r\n        </Row>\r\n        <Row>\r\n          <BigNumber uom=\"❤\">\r\n            {this.state.data.HR.length > 2 ? this.state.data.avgHR : 'Loading '}\r\n          </BigNumber>\r\n        </Row>\r\n        <Row>\r\n          <Graph getData={() => ({data: this.state.data.SpO2, avg: this.state.data.avgSpO2})}/>\r\n        </Row>\r\n        <Row>\r\n          <BigNumber uom=\"%\">\r\n          {this.state.data.SpO2.length > 2 ? this.state.data.avgSpO2 : 'Loading '}\r\n          </BigNumber>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}